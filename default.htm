<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>TypeScript HTML App</title>
    <link rel="stylesheet" href="app.css" type="text/css" />

    <!-- submodules -->
    <script src="submodules/promise/Promise.js"></script>
    <script src="submodules/streams/streams.js"></script>

    <script src="mjpegdecoder.js"></script>

    <script>
        //setImmediate polyfill
        if (!window.setImmediate) {
            window.setImmediate = function (expression) {
                var args = [];
                for (var _i = 0; _i < (arguments.length - 1) ; _i++) {
                    args[_i] = arguments[_i + 1];
                }
                return window.setTimeout.apply(window, [expression, 0].concat(args));
            };
        }

        var exported;
        var currentVideoTime = 0;
        var stopToken = false;
        function decode() {
            MJPEGReader.read(loader.files[0])
                .then(function (mjpeg) {
                    exported = mjpeg;
                    image.style.display = "block";
                    console.log("Decode completed.");
                });
        }
        function show(time) {
            currentVideoTime = time;
            timer.value = time;
            return exported.getFrameByTime(time).then(function (frame) {
                presenter.src = URL.createObjectURL(frame, { oneTimeOnly: true });
            }, function () { });
        }
        function auto() {
            var referenceTime = Date.now() / 1000;
            var referenceVideoTime = currentVideoTime;

            var sequence = Promise.resolve();
            var playNext = function () {
                if (stopToken) {
                    stopToken = false;
                    return;
                }

                var targetTime = referenceVideoTime + Date.now() / 1000 - referenceTime;
                if (targetTime - currentVideoTime > 0.1) {
                    referenceTime = Date.now() / 1000;
                    referenceVideoTime = currentVideoTime;
                    targetTime = referenceVideoTime + 0.1;
                }
                if (targetTime < exported.duration) {
                    sequence = sequence.then(promiseImmediate).then(playNext);
                    return show(targetTime);
                }
                else
                    return show(exported.duration);
            };
            sequence.then(promiseImmediate).then(playNext);
        }
        function promiseImmediate() {
            return new Promise(function (resolve, reject) {
                window.setImmediate(function () {
                    resolve();
                });
            })
        }
    </script>
</head>
<body>
    <h1>TypeScript HTML App</h1>

    <div id="content">
        <label for="loader">Load File: </label><input name="loader" id="loader" type="file" />
        <input type="button" value="Push to decode" onclick="decode()" />
    </div>
    <div id="image" style="display: none;">
        <label for="timer">Time: </label><input name="timer" id="timer" type="number" value="0" onkeydown="if (event.key === 'Enter') showButton.click()" />
        <input type="button" id="showButton" value="Push to show image" onclick="show(parseFloat(timer.value))" /><br />
        <input type="button" id="playButton" value="Play" onclick="this.disabled = 'disabled'; stopButton.removeAttribute('disabled'); auto();" />
        <input type="button" id="stopButton" value="Stop" onclick="this.disabled = 'disabled'; playButton.removeAttribute('disabled'); stopToken = true;" disabled="disabled" /><br />
        <img id="presenter" />
    </div>
</body>
</html>